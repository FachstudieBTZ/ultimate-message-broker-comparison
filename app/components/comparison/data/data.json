[
  {
    "tag": "Apache ActiveMQ - http://activemq.apache.org/",
    "descr": "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.",
    "Description": {
      "plain": "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.\n\nApache ActiveMQ is fast, supports many Cross Language Clients and Protocols, comes with easy to use Enterprise Integration Patterns and many advanced features while fully supporting JMS 1.1 and J2EE 1.4. Apache ActiveMQ is released under the Apache 2.0 License",
      "childs": {
        "0": [
          "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.",
          "Apache ActiveMQ is fast, supports many Cross Language Clients and Protocols, comes with easy to use Enterprise Integration Patterns and many advanced features while fully supporting JMS 1.1 and J2EE 1.4. Apache ActiveMQ is released under the Apache 2.0 License"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/activemq\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/activemq",
              "plain": "https://github.com/apache/activemq\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheActiveMQ]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheActiveMQ]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQ]",
                  "plain": "[@apacheActiveMQ]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheActiveMQProtocols]\n- AUTO\n    - [@apacheActiveMQProtocols]\n- MQTT\n    - [@apacheActiveMQProtocols]\n- OpenWire\n    - [@apacheActiveMQProtocols]\n- STOMP\n    - [@apacheActiveMQProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "AUTO",
              "plain": "AUTO\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OpenWire",
              "plain": "OpenWire\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@acpacheAtiveMQPlatforms]\n- Windows\n    - [@acpacheAtiveMQPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@acpacheAtiveMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@acpacheAtiveMQPlatforms]",
                  "plain": "[@acpacheAtiveMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@acpacheAtiveMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@acpacheAtiveMQPlatforms]",
                  "plain": "[@acpacheAtiveMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheActiveMQExample]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheActiveMQExample]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQExample]",
                  "plain": "[@apacheActiveMQExample]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@apacheActiveMQJMS]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheActiveMQJMS]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQJMS]",
                  "plain": "[@apacheActiveMQJMS]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 1390000\n",
      "childs": {
        "0": [
          [
            {
              "content": "1390000",
              "plain": "1390000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Apollo - http://activemq.apache.org/apollo/",
    "descr": "ActiveMQ's next generation of messaging.",
    "Description": {
      "plain": "ActiveMQ apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets.",
      "childs": {
        "0": [
          "ActiveMQ apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/activemq-apollo\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/activemq-apollo",
              "plain": "https://github.com/apache/activemq-apollo\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheApollo]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheApolloPlatforms]    \n- Windows\n    - [@apacheApolloPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheApolloPlatforms]    \n",
              "childs": [
                {
                  "content": ",[@apacheApolloPlatforms]",
                  "plain": "[@apacheApolloPlatforms]    \n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheApolloPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheApolloPlatforms]",
                  "plain": "[@apacheApolloPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheApollo]\n- MQTT\n    - [@apacheApollo]\n- OpenWire\n    - [@apacheApollo]\n- STOMP\n    - [@apacheApollo]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OpenWire",
              "plain": "OpenWire\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheApolloExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheApolloExamples]\n",
              "childs": [
                {
                  "content": ",[@apacheApolloExamples]",
                  "plain": "[@apacheApolloExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 660.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "660.000",
              "plain": "660.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Kafka - http://kafka.apache.org/",
    "descr": "distributed streaming platform",
    "Description": {
      "plain": "Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies.",
      "childs": {
        "0": [
          "Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/kafka\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/kafka",
              "plain": "https://github.com/apache/kafka\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheKafkaLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheKafkaLicense]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaLicense]",
                  "plain": "[@apacheKafkaLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheKafkaPlatforms]\n- OSX\n    - [@apacheKafkaPlatforms]\n- Windows\n    - [@apacheKafkaPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheKafkaExample]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheKafkaExample]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaExample]",
                  "plain": "[@apacheKafkaExample]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 562.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "562.000",
              "plain": "562.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Qpid - http://qpid.apache.org/",
    "descr": "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms.",
    "Description": {
      "plain": "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms.",
      "childs": {
        "0": [
          "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/qpid\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/qpid",
              "plain": "https://github.com/apache/qpid\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheQpidLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheQpidLicense]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidLicense]",
                  "plain": "[@apacheQpidLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheQpidPlatforms]\n- Windows\n    - [@apacheQpidPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheQpidPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidPlatforms]",
                  "plain": "[@apacheQpidPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheQpidPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidPlatforms]",
                  "plain": "[@apacheQpidPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheQpiProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheQpiProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheQpiProtocols]",
                  "plain": "[@apacheQpiProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@apacheQpidJMS]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheQpidJMS]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidJMS]",
                  "plain": "[@apacheQpidJMS]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheQpidJMSExamples]\n    - [@apacheQpidCPPExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheQpidJMSExamples]\n    - [@apacheQpidCPPExamples]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidJMSExamples]",
                  "plain": "[@apacheQpidJMSExamples]\n    ",
                  "plainChilds": "",
                  "childs": []
                },
                {
                  "content": ",[@apacheQpidCPPExamples]",
                  "plain": "[@apacheQpidCPPExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 690.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "690.000",
              "plain": "690.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Beanstalkd - https://kr.github.io/beanstalkd/",
    "descr": "Beanstalk is a simple, fast work queue.",
    "Description": {
      "plain": "Beanstalk is a simple, fast work queue.\n\nIts interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously.",
      "childs": {
        "0": [
          "Beanstalk is a simple, fast work queue.",
          "Its interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/kr/beanstalkd\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/kr/beanstalkd",
              "plain": "https://github.com/kr/beanstalkd\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@beanstalkdLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@beanstalkdLicense]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdLicense]",
                  "plain": "[@beanstalkdLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@beanstalkdPlatforms]\n- OSX\n    - [@beanstalkdPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@beanstalkdPlatforms]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdPlatforms]",
                  "plain": "[@beanstalkdPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@beanstalkdPlatforms]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdPlatforms]",
                  "plain": "[@beanstalkdPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- Beanstalkd\n    - [@beanstalkdProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Beanstalkd",
              "plain": "Beanstalkd\n",
              "plainChilds": "    - [@beanstalkdProtocols]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdProtocols]",
                  "plain": "[@beanstalkdProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 151.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "151.000",
              "plain": "151.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Celery - http://www.celeryproject.org/",
    "descr": "Distributed Task Queue",
    "Description": {
      "plain": "Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well.\nThe execution units, called tasks, are executed concurrently on a single or more worker servers using multiprocessing, Eventlet, or gevent. Tasks can execute asynchronously (in the background) or synchronously (wait until ready).\n\nCelery is used in production systems to process millions of tasks a day.",
      "childs": {
        "0": [
          "Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well. The execution units, called tasks, are executed concurrently on a single or more worker servers using multiprocessing, Eventlet, or gevent. Tasks can execute asynchronously (in the background) or synchronously (wait until ready).",
          "Celery is used in production systems to process millions of tasks a day."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/celery/celery\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/celery/celery",
              "plain": "https://github.com/celery/celery\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@celeryLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@celeryLicense]\n",
              "childs": [
                {
                  "content": ",[@celeryLicense]",
                  "plain": "[@celeryLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@celeryExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@celeryExamples]\n",
              "childs": [
                {
                  "content": ",[@celeryExamples]",
                  "plain": "[@celeryExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- RabbitMQ\n    - [@celeryBackend]\n- Redis\n    - [@celeryBackend]\n",
      "childs": {
        "0": [
          [
            {
              "content": "RabbitMQ",
              "plain": "RabbitMQ\n",
              "plainChilds": "    - [@celeryBackend]\n",
              "childs": [
                {
                  "content": ",[@celeryBackend]",
                  "plain": "[@celeryBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Redis",
              "plain": "Redis\n",
              "plainChilds": "    - [@celeryBackend]\n",
              "childs": [
                {
                  "content": ",[@celeryBackend]",
                  "plain": "[@celeryBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 160.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "160.000",
              "plain": "160.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Chronicle Queue - http://chronicle.software/products/chronicle-queue/",
    "descr": "Micro second messaging, which stores to disk a complete history of all your messages.",
    "Description": {
      "plain": "Chronicle Queue is able to persist every single event/message, It records each event to a memory mapped file.",
      "childs": {
        "0": [
          "Chronicle Queue is able to persist every single event/message, It records each event to a memory mapped file."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/OpenHFT/Chronicle-Queue\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/OpenHFT/Chronicle-Queue",
              "plain": "https://github.com/OpenHFT/Chronicle-Queue\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@chronicleQueueLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@chronicleQueueLicense]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueueLicense]",
                  "plain": "[@chronicleQueueLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@chronicleQueuePlatforms]\n- OSX\n    - [@chronicleQueuePlatforms]\n- Windows\n    - [@chronicleQueuePlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@chronicleQueueExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@chronicleQueueExamples]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueueExamples]",
                  "plain": "[@chronicleQueueExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 547.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "547.000",
              "plain": "547.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Darner - https://github.com/wavii/darner",
    "descr": "simple, lightweight message queue",
    "Description": {
      "plain": "Darner is a very simple message queue server. Unlike in-memory servers such as redis, Darner is designed to handle queues much larger than what can be held in RAM. And unlike enterprise queue servers such as RabbitMQ, Darner keeps all messages out of process, relying instead on the kernel's virtual memory manager via log-structured storage.",
      "childs": {
        "0": [
          "Darner is a very simple message queue server. Unlike in-memory servers such as redis, Darner is designed to handle queues much larger than what can be held in RAM. And unlike enterprise queue servers such as RabbitMQ, Darner keeps all messages out of process, relying instead on the kernel's virtual memory manager via log-structured storage."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/wavii/darner\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/wavii/darner",
              "plain": "https://github.com/wavii/darner\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@darnerLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@darnerLicense]\n",
              "childs": [
                {
                  "content": ",[@darnerLicense]",
                  "plain": "[@darnerLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- memcached  \n    - [@darnerProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "memcached",
              "plain": "memcached  \n",
              "plainChilds": "    - [@darnerProtocols]\n",
              "childs": [
                {
                  "content": ",[@darnerProtocols]",
                  "plain": "[@darnerProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@darnerPlatforms]\n- OSX\n    - [@darnerPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@darnerPlatforms]\n",
              "childs": [
                {
                  "content": ",[@darnerPlatforms]",
                  "plain": "[@darnerPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@darnerPlatforms]\n",
              "childs": [
                {
                  "content": ",[@darnerPlatforms]",
                  "plain": "[@darnerPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 184.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "184.000",
              "plain": "184.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  }
]