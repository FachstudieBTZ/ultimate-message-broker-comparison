[
  {
    "tag": "Apache ActiveMQ - http://activemq.apache.org/",
    "descr": "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.",
    "Description": {
      "plain": "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.\n\nApache ActiveMQ is fast, supports many Cross Language Clients and Protocols, comes with easy to use Enterprise Integration Patterns and many advanced features while fully supporting JMS 1.1 and J2EE 1.4. Apache ActiveMQ is released under the Apache 2.0 License",
      "childs": {
        "0": [
          "Apache ActiveMQ is the most popular and powerful open source messaging and Integration Patterns server.",
          "Apache ActiveMQ is fast, supports many Cross Language Clients and Protocols, comes with easy to use Enterprise Integration Patterns and many advanced features while fully supporting JMS 1.1 and J2EE 1.4. Apache ActiveMQ is released under the Apache 2.0 License"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/activemq\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/activemq",
              "plain": "https://github.com/apache/activemq\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheActiveMQ]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheActiveMQ]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQ]",
                  "plain": "[@apacheActiveMQ]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheActiveMQProtocols]\n- AUTO\n    - [@apacheActiveMQProtocols]\n- MQTT\n    - [@apacheActiveMQProtocols]\n- OpenWire\n    - [@apacheActiveMQProtocols]\n- STOMP\n    - [@apacheActiveMQProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "AUTO",
              "plain": "AUTO\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OpenWire",
              "plain": "OpenWire\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@apacheActiveMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQProtocols]",
                  "plain": "[@apacheActiveMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@acpacheAtiveMQPlatforms]\n- Windows\n    - [@acpacheAtiveMQPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@acpacheAtiveMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@acpacheAtiveMQPlatforms]",
                  "plain": "[@acpacheAtiveMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@acpacheAtiveMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@acpacheAtiveMQPlatforms]",
                  "plain": "[@acpacheAtiveMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheActiveMQExample]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheActiveMQExample]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQExample]",
                  "plain": "[@apacheActiveMQExample]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@apacheActiveMQJMS]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheActiveMQJMS]\n",
              "childs": [
                {
                  "content": ",[@apacheActiveMQJMS]",
                  "plain": "[@apacheActiveMQJMS]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 1390000\n",
      "childs": {
        "0": [
          [
            {
              "content": "1390000",
              "plain": "1390000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Apollo - http://activemq.apache.org/apollo/",
    "descr": "ActiveMQ's next generation of messaging.",
    "Description": {
      "plain": "ActiveMQ apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets.",
      "childs": {
        "0": [
          "ActiveMQ apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/activemq-apollo\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/activemq-apollo",
              "plain": "https://github.com/apache/activemq-apollo\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheApollo]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheApolloPlatforms]    \n- Windows\n    - [@apacheApolloPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheApolloPlatforms]    \n",
              "childs": [
                {
                  "content": ",[@apacheApolloPlatforms]",
                  "plain": "[@apacheApolloPlatforms]    \n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheApolloPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheApolloPlatforms]",
                  "plain": "[@apacheApolloPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheApollo]\n- MQTT\n    - [@apacheApollo]\n- OpenWire\n    - [@apacheApollo]\n- STOMP\n    - [@apacheApollo]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OpenWire",
              "plain": "OpenWire\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@apacheApollo]\n",
              "childs": [
                {
                  "content": ",[@apacheApollo]",
                  "plain": "[@apacheApollo]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheApolloExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheApolloExamples]\n",
              "childs": [
                {
                  "content": ",[@apacheApolloExamples]",
                  "plain": "[@apacheApolloExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 660.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "660.000",
              "plain": "660.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Kafka - http://kafka.apache.org/",
    "descr": "distributed streaming platform",
    "Description": {
      "plain": "Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies.",
      "childs": {
        "0": [
          "Kafka™ is used for building real-time data pipelines and streaming apps. It is horizontally scalable, fault-tolerant, wicked fast, and runs in production in thousands of companies."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/kafka\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/kafka",
              "plain": "https://github.com/apache/kafka\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheKafkaLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheKafkaLicense]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaLicense]",
                  "plain": "[@apacheKafkaLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheKafkaPlatforms]\n- OSX\n    - [@apacheKafkaPlatforms]\n- Windows\n    - [@apacheKafkaPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheKafkaPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaPlatforms]",
                  "plain": "[@apacheKafkaPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheKafkaExample]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheKafkaExample]\n",
              "childs": [
                {
                  "content": ",[@apacheKafkaExample]",
                  "plain": "[@apacheKafkaExample]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 562.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "562.000",
              "plain": "562.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Apache Qpid - http://qpid.apache.org/",
    "descr": "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms.",
    "Description": {
      "plain": "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms.",
      "childs": {
        "0": [
          "Apache Qpid™ makes messaging tools that speak AMQP and support many languages and platforms."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/apache/qpid\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/apache/qpid",
              "plain": "https://github.com/apache/qpid\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@apacheQpidLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@apacheQpidLicense]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidLicense]",
                  "plain": "[@apacheQpidLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@apacheQpidPlatforms]\n- Windows\n    - [@apacheQpidPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@apacheQpidPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidPlatforms]",
                  "plain": "[@apacheQpidPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@apacheQpidPlatforms]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidPlatforms]",
                  "plain": "[@apacheQpidPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@apacheQpiProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@apacheQpiProtocols]\n",
              "childs": [
                {
                  "content": ",[@apacheQpiProtocols]",
                  "plain": "[@apacheQpiProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@apacheQpidJMS]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheQpidJMS]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidJMS]",
                  "plain": "[@apacheQpidJMS]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@apacheQpidJMSExamples]\n    - [@apacheQpidCPPExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@apacheQpidJMSExamples]\n    - [@apacheQpidCPPExamples]\n",
              "childs": [
                {
                  "content": ",[@apacheQpidJMSExamples]",
                  "plain": "[@apacheQpidJMSExamples]\n    ",
                  "plainChilds": "",
                  "childs": []
                },
                {
                  "content": ",[@apacheQpidCPPExamples]",
                  "plain": "[@apacheQpidCPPExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 690.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "690.000",
              "plain": "690.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Beanstalkd - https://kr.github.io/beanstalkd/",
    "descr": "Beanstalk is a simple, fast work queue.",
    "Description": {
      "plain": "Beanstalk is a simple, fast work queue.\n\nIts interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously.",
      "childs": {
        "0": [
          "Beanstalk is a simple, fast work queue.",
          "Its interface is generic, but was originally designed for reducing the latency of page views in high-volume web applications by running time-consuming tasks asynchronously."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/kr/beanstalkd\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/kr/beanstalkd",
              "plain": "https://github.com/kr/beanstalkd\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@beanstalkdLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@beanstalkdLicense]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdLicense]",
                  "plain": "[@beanstalkdLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@beanstalkdPlatforms]\n- OSX\n    - [@beanstalkdPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@beanstalkdPlatforms]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdPlatforms]",
                  "plain": "[@beanstalkdPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@beanstalkdPlatforms]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdPlatforms]",
                  "plain": "[@beanstalkdPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- Beanstalkd\n    - [@beanstalkdProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Beanstalkd",
              "plain": "Beanstalkd\n",
              "plainChilds": "    - [@beanstalkdProtocols]\n",
              "childs": [
                {
                  "content": ",[@beanstalkdProtocols]",
                  "plain": "[@beanstalkdProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 151.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "151.000",
              "plain": "151.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Celery - http://www.celeryproject.org/",
    "descr": "Distributed Task Queue",
    "Description": {
      "plain": "Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well.\nThe execution units, called tasks, are executed concurrently on a single or more worker servers using multiprocessing, Eventlet, or gevent. Tasks can execute asynchronously (in the background) or synchronously (wait until ready).\n\nCelery is used in production systems to process millions of tasks a day.",
      "childs": {
        "0": [
          "Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well. The execution units, called tasks, are executed concurrently on a single or more worker servers using multiprocessing, Eventlet, or gevent. Tasks can execute asynchronously (in the background) or synchronously (wait until ready).",
          "Celery is used in production systems to process millions of tasks a day."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/celery/celery\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/celery/celery",
              "plain": "https://github.com/celery/celery\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@celeryLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@celeryLicense]\n",
              "childs": [
                {
                  "content": ",[@celeryLicense]",
                  "plain": "[@celeryLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@celeryExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@celeryExamples]\n",
              "childs": [
                {
                  "content": ",[@celeryExamples]",
                  "plain": "[@celeryExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- RabbitMQ\n    - [@celeryBackend]\n- Redis\n    - [@celeryBackend]\n",
      "childs": {
        "0": [
          [
            {
              "content": "RabbitMQ",
              "plain": "RabbitMQ\n",
              "plainChilds": "    - [@celeryBackend]\n",
              "childs": [
                {
                  "content": ",[@celeryBackend]",
                  "plain": "[@celeryBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Redis",
              "plain": "Redis\n",
              "plainChilds": "    - [@celeryBackend]\n",
              "childs": [
                {
                  "content": ",[@celeryBackend]",
                  "plain": "[@celeryBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 160.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "160.000",
              "plain": "160.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Chronicle Queue - http://chronicle.software/products/chronicle-queue/",
    "descr": "Micro second messaging, which stores to disk a complete history of all your messages.",
    "Description": {
      "plain": "Chronicle Queue is able to persist every single event/message, It records each event to a memory mapped file.",
      "childs": {
        "0": [
          "Chronicle Queue is able to persist every single event/message, It records each event to a memory mapped file."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/OpenHFT/Chronicle-Queue\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/OpenHFT/Chronicle-Queue",
              "plain": "https://github.com/OpenHFT/Chronicle-Queue\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@chronicleQueueLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@chronicleQueueLicense]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueueLicense]",
                  "plain": "[@chronicleQueueLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@chronicleQueuePlatforms]\n- OSX\n    - [@chronicleQueuePlatforms]\n- Windows\n    - [@chronicleQueuePlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@chronicleQueuePlatforms]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueuePlatforms]",
                  "plain": "[@chronicleQueuePlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@chronicleQueueExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@chronicleQueueExamples]\n",
              "childs": [
                {
                  "content": ",[@chronicleQueueExamples]",
                  "plain": "[@chronicleQueueExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 547.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "547.000",
              "plain": "547.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Darner - https://github.com/wavii/darner",
    "descr": "simple, lightweight message queue",
    "Description": {
      "plain": "Darner is a very simple message queue server. Unlike in-memory servers such as redis, Darner is designed to handle queues much larger than what can be held in RAM. And unlike enterprise queue servers such as RabbitMQ, Darner keeps all messages out of process, relying instead on the kernel's virtual memory manager via log-structured storage.",
      "childs": {
        "0": [
          "Darner is a very simple message queue server. Unlike in-memory servers such as redis, Darner is designed to handle queues much larger than what can be held in RAM. And unlike enterprise queue servers such as RabbitMQ, Darner keeps all messages out of process, relying instead on the kernel's virtual memory manager via log-structured storage."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/wavii/darner\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/wavii/darner",
              "plain": "https://github.com/wavii/darner\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@darnerLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@darnerLicense]\n",
              "childs": [
                {
                  "content": ",[@darnerLicense]",
                  "plain": "[@darnerLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- memcached  \n    - [@darnerProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "memcached",
              "plain": "memcached  \n",
              "plainChilds": "    - [@darnerProtocols]\n",
              "childs": [
                {
                  "content": ",[@darnerProtocols]",
                  "plain": "[@darnerProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@darnerPlatforms]\n- OSX\n    - [@darnerPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@darnerPlatforms]\n",
              "childs": [
                {
                  "content": ",[@darnerPlatforms]",
                  "plain": "[@darnerPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@darnerPlatforms]\n",
              "childs": [
                {
                  "content": ",[@darnerPlatforms]",
                  "plain": "[@darnerPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 184.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "184.000",
              "plain": "184.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "DelayedJob - https://github.com/collectiveidea/delayed_job",
    "descr": "encapsulates the common pattern of asynchronously executing longer tasks in the background",
    "Description": {
      "plain": "Delayed::Job (or DJ) encapsulates the common pattern of asynchronously executing longer tasks in the background.\n\nIt is a direct extraction from Shopify where the job table is responsible for a multitude of core tasks. Amongst those tasks are:\n- sending massive newsletters\n- image resizing\n- http downloads\n- updating smart collections\n- updating solr, our search server, after product changes\n- batch imports\n- spam checks",
      "childs": {
        "0": [
          "Delayed::Job (or DJ) encapsulates the common pattern of asynchronously executing longer tasks in the background.",
          "It is a direct extraction from Shopify where the job table is responsible for a multitude of core tasks. Amongst those tasks are: - sending massive newsletters - image resizing - http downloads - updating smart collections - updating solr, our search server, after product changes - batch imports - spam checks"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/collectiveidea/delayed_job\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/collectiveidea/delayed_job",
              "plain": "https://github.com/collectiveidea/delayed_job\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@delayedJobLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@delayedJobLicense]\n",
              "childs": [
                {
                  "content": ",[@delayedJobLicense]",
                  "plain": "[@delayedJobLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@delayedJobPlatforms]\n- OSX\n    - [@delayedJobPlatforms]\n- Windows\n    - [@delayedJobPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@delayedJobPlatforms]\n",
              "childs": [
                {
                  "content": ",[@delayedJobPlatforms]",
                  "plain": "[@delayedJobPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@delayedJobPlatforms]\n",
              "childs": [
                {
                  "content": ",[@delayedJobPlatforms]",
                  "plain": "[@delayedJobPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@delayedJobPlatforms]\n",
              "childs": [
                {
                  "content": ",[@delayedJobPlatforms]",
                  "plain": "[@delayedJobPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 61.100\n",
      "childs": {
        "0": [
          [
            {
              "content": "61.100",
              "plain": "61.100\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Disque - https://github.com/antirez/disque",
    "descr": "in-memory, distributed job queue",
    "Description": {
      "plain": "Disque is an ongoing experiment to build a distributed, in-memory, message broker. Its goal is to capture the essence of the 'Redis as a jobs queue' use case, which is usually implemented using blocking list operations, and move it into an ad-hoc, self-contained, scalable, and fault tolerant design, with simple to understand properties and guarantees, but still resembling Redis in terms of simplicity, performance, and implementation as a C non-blocking networked server.",
      "childs": {
        "0": [
          "Disque is an ongoing experiment to build a distributed, in-memory, message broker. Its goal is to capture the essence of the 'Redis as a jobs queue' use case, which is usually implemented using blocking list operations, and move it into an ad-hoc, self-contained, scalable, and fault tolerant design, with simple to understand properties and guarantees, but still resembling Redis in terms of simplicity, performance, and implementation as a C non-blocking networked server."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/antirez/disque\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/antirez/disque",
              "plain": "https://github.com/antirez/disque\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@disqueLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@disqueLicense]\n",
              "childs": [
                {
                  "content": ",[@disqueLicense]",
                  "plain": "[@disqueLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- memcached\n    - [@disqueProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "memcached",
              "plain": "memcached\n",
              "plainChilds": "    - [@disqueProtocol]\n",
              "childs": [
                {
                  "content": ",[@disqueProtocol]",
                  "plain": "[@disqueProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 107.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "107.000",
              "plain": "107.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Eclipse Mosquitto - https://mosquitto.org/",
    "descr": "",
    "Description": {
      "plain": "Eclipse Mosquitto™ is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. MQTT provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for 'Internet of Things' messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers like the Arduino.",
      "childs": {
        "0": [
          "Eclipse Mosquitto™ is an open source (EPL/EDL licensed) message broker that implements the MQTT protocol versions 3.1 and 3.1.1. MQTT provides a lightweight method of carrying out messaging using a publish/subscribe model. This makes it suitable for 'Internet of Things' messaging such as with low power sensors or mobile devices such as phones, embedded computers or microcontrollers like the Arduino."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/eclipse/mosquitto\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/eclipse/mosquitto",
              "plain": "https://github.com/eclipse/mosquitto\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- EPL\n    - [@eclipseMosquittoLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "EPL",
              "plain": "EPL\n",
              "plainChilds": "    - [@eclipseMosquittoLicense]\n",
              "childs": [
                {
                  "content": ",[@eclipseMosquittoLicense]",
                  "plain": "[@eclipseMosquittoLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- MQTT\n    - [@eclipseMosquittoProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@eclipseMosquittoProtocol]\n",
              "childs": [
                {
                  "content": ",[@eclipseMosquittoProtocol]",
                  "plain": "[@eclipseMosquittoProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    -[@eclipseMosquittoPlatforms]\n- OSX\n    -[@eclipseMosquittoPlatforms]\n- Windows\n    -[@eclipseMosquittoPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux -[@eclipseMosquittoPlatforms]",
              "plain": "Linux\n    -[@eclipseMosquittoPlatforms]\n",
              "plainChilds": "",
              "childs": []
            },
            {
              "content": "OSX -[@eclipseMosquittoPlatforms]",
              "plain": "OSX\n    -[@eclipseMosquittoPlatforms]\n",
              "plainChilds": "",
              "childs": []
            },
            {
              "content": "Windows -[@eclipseMosquittoPlatforms]",
              "plain": "Windows\n    -[@eclipseMosquittoPlatforms]\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@eclipseMosquittoExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@eclipseMosquittoExamples]\n",
              "childs": [
                {
                  "content": ",[@eclipseMosquittoExamples]",
                  "plain": "[@eclipseMosquittoExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 297.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "297.000",
              "plain": "297.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "OM2M - http://www.eclipse.org/om2m/",
    "descr": "The Eclipse OM2M project, initiated by LAAS-CNRS, is an open source implementation of oneM2M and SmartM2M standard.",
    "Description": {
      "plain": "The Eclipse OM2M project, initiated by LAAS-CNRS, is an open source implementation of oneM2M and SmartM2M standard. It provides a horizontal M2M service platform for developing services independently of the underlying network, with the aim to facilitate the deployment of vertical applications and heterogeneous devices.",
      "childs": {
        "0": [
          "The Eclipse OM2M project, initiated by LAAS-CNRS, is an open source implementation of oneM2M and SmartM2M standard. It provides a horizontal M2M service platform for developing services independently of the underlying network, with the aim to facilitate the deployment of vertical applications and heterogeneous devices."
        ]
      }
    },
    "Repo": {
      "plain": "- https://git.eclipse.org/c/om2m/org.eclipse.om2m.git/\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://git.eclipse.org/c/om2m/org.eclipse.om2m.git/",
              "plain": "https://git.eclipse.org/c/om2m/org.eclipse.om2m.git/\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- EPL\n    - [@eclipseOm2mLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "EPL",
              "plain": "EPL\n",
              "plainChilds": "    - [@eclipseOm2mLicense]\n",
              "childs": [
                {
                  "content": ",[@eclipseOm2mLicense]",
                  "plain": "[@eclipseOm2mLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n- OSX\n- Windows\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "",
              "childs": []
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "",
              "childs": []
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    }
  },
  {
    "tag": "Gearman - http://gearman.org/",
    "descr": "in-memory, distributed job queue",
    "Description": {
      "plain": "Gearman provides a generic application framework to farm out work to other machines or processes that are better suited to do the work. It allows you to do work in parallel, to load balance processing, and to call functions between languages. It can be used in a variety of applications, from high-availability web sites to the transport of database replication events. In other words, it is the nervous system for how distributed processing communicates. A few strong points about Gearman:",
      "childs": {
        "0": [
          "Gearman provides a generic application framework to farm out work to other machines or processes that are better suited to do the work. It allows you to do work in parallel, to load balance processing, and to call functions between languages. It can be used in a variety of applications, from high-availability web sites to the transport of database replication events. In other words, it is the nervous system for how distributed processing communicates. A few strong points about Gearman:"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/gearman/gearmand\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/gearman/gearmand",
              "plain": "https://github.com/gearman/gearmand\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@gearmanLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@gearmanLicense]\n",
              "childs": [
                {
                  "content": ",[@gearmanLicense]",
                  "plain": "[@gearmanLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@gearmanPlatforms]\n- Windows\n    - [@gearmanPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@gearmanPlatforms]\n",
              "childs": [
                {
                  "content": ",[@gearmanPlatforms]",
                  "plain": "[@gearmanPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@gearmanPlatforms]\n",
              "childs": [
                {
                  "content": ",[@gearmanPlatforms]",
                  "plain": "[@gearmanPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- Gearman\n    - [@gearmanProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Gearman",
              "plain": "Gearman\n",
              "plainChilds": "    - [@gearmanProtocols]\n",
              "childs": [
                {
                  "content": ",[@gearmanProtocols]",
                  "plain": "[@gearmanProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@gearmanExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@gearmanExamples]\n",
              "childs": [
                {
                  "content": ",[@gearmanExamples]",
                  "plain": "[@gearmanExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 600.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "600.000",
              "plain": "600.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "HornetQ - http://hornetq.jboss.org/",
    "descr": "open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system",
    "Description": {
      "plain": "HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system.",
      "childs": {
        "0": [
          "HornetQ is an open source project to build a multi-protocol, embeddable, very high performance, clustered, asynchronous messaging system."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/hornetq/hornetq\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/hornetq/hornetq",
              "plain": "https://github.com/hornetq/hornetq\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@hornetQLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@hornetQLicense]\n",
              "childs": [
                {
                  "content": ",[@hornetQLicense]",
                  "plain": "[@hornetQLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@hornetQProtocol]\n- STOMP\n    - [@hornetQProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@hornetQProtocol]\n",
              "childs": [
                {
                  "content": ",[@hornetQProtocol]",
                  "plain": "[@hornetQProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@hornetQProtocol]\n",
              "childs": [
                {
                  "content": ",[@hornetQProtocol]",
                  "plain": "[@hornetQProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@hornetQPlatforms]\n- OSX\n    - [@hornetQPlatforms]\n- Windows\n    - [@hornetQPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@hornetQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@hornetQPlatforms]",
                  "plain": "[@hornetQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@hornetQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@hornetQPlatforms]",
                  "plain": "[@hornetQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@hornetQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@hornetQPlatforms]",
                  "plain": "[@hornetQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@hornetQExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@hornetQExamples]\n",
              "childs": [
                {
                  "content": ",[@hornetQExamples]",
                  "plain": "[@hornetQExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@hornetQProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@hornetQProtocol]\n",
              "childs": [
                {
                  "content": ",[@hornetQProtocol]",
                  "plain": "[@hornetQProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 160.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "160.000",
              "plain": "160.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Huey - https://huey.readthedocs.io/en/latest/",
    "descr": "a little task queue for pytho",
    "Description": {
      "plain": "a lightweight alternative.\n- written in python\n- only dependency is the Python Redis client\n\nsupports:\n- multi-process, multi-thread or greenlet task execution models\n- schedule tasks to execute at a given time, or after a given delay\n- schedule recurring tasks, like a crontab\n- retry tasks that fail automatically\n- task result storage",
      "childs": {
        "0": [
          "a lightweight alternative. - written in python - only dependency is the Python Redis client",
          "supports: - multi-process, multi-thread or greenlet task execution models - schedule tasks to execute at a given time, or after a given delay - schedule recurring tasks, like a crontab - retry tasks that fail automatically - task result storage"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/coleifer/huey\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/coleifer/huey",
              "plain": "https://github.com/coleifer/huey\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@hueyLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@hueyLicense]\n",
              "childs": [
                {
                  "content": ",[@hueyLicense]",
                  "plain": "[@hueyLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@hueyExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@hueyExamples]\n",
              "childs": [
                {
                  "content": ",[@hueyExamples]",
                  "plain": "[@hueyExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- Redis\n    - [@hueyBackend]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Redis",
              "plain": "Redis\n",
              "plainChilds": "    - [@hueyBackend]\n",
              "childs": [
                {
                  "content": ",[@hueyBackend]",
                  "plain": "[@hueyBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 14.200\n",
      "childs": {
        "0": [
          [
            {
              "content": "14.200",
              "plain": "14.200\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Kestrel - https://github.com/twitter-archive/kestrel",
    "descr": "in-memory, distributed job queue",
    "Description": {
      "plain": "Kestrel is based on Blaine Cook's starling simple, distributed message queue, with added features and bulletproofing, as well as the scalability offered by actors and the JVM.",
      "childs": {
        "0": [
          "Kestrel is based on Blaine Cook's starling simple, distributed message queue, with added features and bulletproofing, as well as the scalability offered by actors and the JVM."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/twitter-archive/kestrel\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/twitter-archive/kestrel",
              "plain": "https://github.com/twitter-archive/kestrel\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@kestrelLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@kestrelLicense]\n",
              "childs": [
                {
                  "content": ",[@kestrelLicense]",
                  "plain": "[@kestrelLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- memcached\n    - [@kestrelProtocols]\n- thrift\n    - [@kestrelProtocols]\n- text\n    - [@kestrelProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "memcached",
              "plain": "memcached\n",
              "plainChilds": "    - [@kestrelProtocols]\n",
              "childs": [
                {
                  "content": ",[@kestrelProtocols]",
                  "plain": "[@kestrelProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "thrift",
              "plain": "thrift\n",
              "plainChilds": "    - [@kestrelProtocols]\n",
              "childs": [
                {
                  "content": ",[@kestrelProtocols]",
                  "plain": "[@kestrelProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "text",
              "plain": "text\n",
              "plainChilds": "    - [@kestrelProtocols]\n",
              "childs": [
                {
                  "content": ",[@kestrelProtocols]",
                  "plain": "[@kestrelProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@kestrelPlatforms]\n- OSX\n    - [@kestrelPlatforms]\n- Windows\n    - [@kestrelPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@kestrelPlatforms]\n",
              "childs": [
                {
                  "content": ",[@kestrelPlatforms]",
                  "plain": "[@kestrelPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@kestrelPlatforms]\n",
              "childs": [
                {
                  "content": ",[@kestrelPlatforms]",
                  "plain": "[@kestrelPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@kestrelPlatforms]\n",
              "childs": [
                {
                  "content": ",[@kestrelPlatforms]",
                  "plain": "[@kestrelPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 43.400\n",
      "childs": {
        "0": [
          [
            {
              "content": "43.400",
              "plain": "43.400\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Kue - https://automattic.github.io/kue/",
    "descr": "Kue is a priority job queue backed by redis, built for node.js.",
    "Description": {
      "plain": "Kue is a priority job queue backed by redis, built for node.js.",
      "childs": {
        "0": [
          "Kue is a priority job queue backed by redis, built for node.js."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/Automattic/kue\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/Automattic/kue",
              "plain": "https://github.com/Automattic/kue\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@kueLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@kueLicense]\n",
              "childs": [
                {
                  "content": ",[@kueLicense]",
                  "plain": "[@kueLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@kueExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@kueExamples]\n",
              "childs": [
                {
                  "content": ",[@kueExamples]",
                  "plain": "[@kueExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- Redis\n",
      "childs": {
        "0": [
          [
            {
              "content": "Redis",
              "plain": "Redis\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    }
  },
  {
    "tag": "MappedBus - http://mappedbus.io/",
    "descr": "",
    "Description": {
      "plain": "Mappedbus is a Java based high throughput, low latency message bus, using either a memory mapped file or shared memory as transport",
      "childs": {
        "0": [
          "Mappedbus is a Java based high throughput, low latency message bus, using either a memory mapped file or shared memory as transport"
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/caplogic/Mappedbus\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/caplogic/Mappedbus",
              "plain": "https://github.com/caplogic/Mappedbus\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- Apache 2.0\n    - [@mappedbusLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Apache 2.0",
              "plain": "Apache 2.0\n",
              "plainChilds": "    - [@mappedbusLicense]\n",
              "childs": [
                {
                  "content": ",[@mappedbusLicense]",
                  "plain": "[@mappedbusLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "- Linux\n    - [@mappedBusPlatforms]\n- OSX\n    - [@mappedBusPlatforms]\n- Windows\n    - [@mappedBusPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@mappedBusPlatforms]\n",
              "childs": [
                {
                  "content": ",[@mappedBusPlatforms]",
                  "plain": "[@mappedBusPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@mappedBusPlatforms]\n",
              "childs": [
                {
                  "content": ",[@mappedBusPlatforms]",
                  "plain": "[@mappedBusPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@mappedBusPlatforms]\n",
              "childs": [
                {
                  "content": ",[@mappedBusPlatforms]",
                  "plain": "[@mappedBusPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@mappedBusExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@mappedBusExamples]\n",
              "childs": [
                {
                  "content": ",[@mappedBusExamples]",
                  "plain": "[@mappedBusExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    }
  },
  {
    "tag": "Message Bus - https://github.com/groupon/Message-Bus",
    "descr": "",
    "Description": {
      "plain": "MessageBus is a distributed messaging platform built on top of hornetq, and supports java and ruby client. This project includes a patch to HornetQ, and the java and ruby client that works with it.",
      "childs": {
        "0": [
          "MessageBus is a distributed messaging platform built on top of hornetq, and supports java and ruby client. This project includes a patch to HornetQ, and the java and ruby client that works with it."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/groupon/Message-Bus\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/groupon/Message-Bus",
              "plain": "https://github.com/groupon/Message-Bus\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@messageBusLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@messageBusLicense]\n",
              "childs": [
                {
                  "content": ",[@messageBusLicense]",
                  "plain": "[@messageBusLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- STOMP\n    - [@messageBusProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@messageBusProtocol]\n",
              "childs": [
                {
                  "content": ",[@messageBusProtocol]",
                  "plain": "[@messageBusProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@messageBusExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@messageBusExamples]\n",
              "childs": [
                {
                  "content": ",[@messageBusExamples]",
                  "plain": "[@messageBusExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- HornetQ\n    - [@messageBusBackend]\n",
      "childs": {
        "0": [
          [
            {
              "content": "HornetQ",
              "plain": "HornetQ\n",
              "plainChilds": "    - [@messageBusBackend]\n",
              "childs": [
                {
                  "content": ",[@messageBusBackend]",
                  "plain": "[@messageBusBackend]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    }
  },
  {
    "tag": "RabbitMQ - https://www.rabbitmq.com/",
    "descr": "ActiveMQ's next generation of messaging.",
    "Description": {
      "plain": "ActiveMQ Apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, Apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets.",
      "childs": {
        "0": [
          "ActiveMQ Apollo is a faster, more reliable, easier to maintain messaging broker built from the foundations of the original ActiveMQ. It accomplishes this using a radically different threading and message dispatching architecture. Like ActiveMQ, Apollo is a multi-Protocol broker and supports STOMP, AMQP, MQTT, Openwire, SSL, and WebSockets."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/rabbitmq/rabbitmq-server\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/rabbitmq/rabbitmq-server",
              "plain": "https://github.com/rabbitmq/rabbitmq-server\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MPL 1.1\n    - [@rabbitMQLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MPL 1.1",
              "plain": "MPL 1.1\n",
              "plainChilds": "    - [@rabbitMQLicense]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQLicense]",
                  "plain": "[@rabbitMQLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- AMQP\n    - [@rabbitMQProtocols]\n- MQTT\n    - [@rabbitMQProtocols]\n- STOMP\n    - [@rabbitMQProtocols]\n",
      "childs": {
        "0": [
          [
            {
              "content": "AMQP",
              "plain": "AMQP\n",
              "plainChilds": "    - [@rabbitMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQProtocols]",
                  "plain": "[@rabbitMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "MQTT",
              "plain": "MQTT\n",
              "plainChilds": "    - [@rabbitMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQProtocols]",
                  "plain": "[@rabbitMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "STOMP",
              "plain": "STOMP\n",
              "plainChilds": "    - [@rabbitMQProtocols]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQProtocols]",
                  "plain": "[@rabbitMQProtocols]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Server Platforms": {
      "plain": "- Linux\n    - [@rabbitMQPlatforms]\n- OSX\n    - [@rabbitMQPlatforms]    \n- Windows\n    - [@rabbitMQPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@rabbitMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQPlatforms]",
                  "plain": "[@rabbitMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@rabbitMQPlatforms]    \n",
              "childs": [
                {
                  "content": ",[@rabbitMQPlatforms]",
                  "plain": "[@rabbitMQPlatforms]    \n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "Windows",
              "plain": "Windows\n",
              "plainChilds": "    - [@rabbitMQPlatforms]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQPlatforms]",
                  "plain": "[@rabbitMQPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@rabbitMQExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@rabbitMQExamples]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQExamples]",
                  "plain": "[@rabbitMQExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- Yes\n    - [@rabbitMQJMS]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@rabbitMQJMS]\n",
              "childs": [
                {
                  "content": ",[@rabbitMQJMS]",
                  "plain": "[@rabbitMQJMS]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 2.030.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "2.030.000",
              "plain": "2.030.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Redis - https://redis.io/",
    "descr": "in-memory data structure store, used as a database, cache and message broker",
    "Description": {
      "plain": "Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.",
      "childs": {
        "0": [
          "Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/antirez/redis/\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/antirez/redis/",
              "plain": "https://github.com/antirez/redis/\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- BSD-3-Clause\n    - [@redisLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "BSD-3-Clause",
              "plain": "BSD-3-Clause\n",
              "plainChilds": "    - [@redisLicense]\n",
              "childs": [
                {
                  "content": ",[@redisLicense]",
                  "plain": "[@redisLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Server Platforms": {
      "plain": "- Linux\n    - [@redisPlatforms]\n- OSX\n    - [@redisPlatforms]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Linux",
              "plain": "Linux\n",
              "plainChilds": "    - [@redisPlatforms]\n",
              "childs": [
                {
                  "content": ",[@redisPlatforms]",
                  "plain": "[@redisPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            },
            {
              "content": "OSX",
              "plain": "OSX\n",
              "plainChilds": "    - [@redisPlatforms]\n",
              "childs": [
                {
                  "content": ",[@redisPlatforms]",
                  "plain": "[@redisPlatforms]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "- RESP\n    - [@redisProtocol]\n",
      "childs": {
        "0": [
          [
            {
              "content": "RESP",
              "plain": "RESP\n",
              "plainChilds": "    - [@redisProtocol]\n",
              "childs": [
                {
                  "content": ",[@redisProtocol]",
                  "plain": "[@redisProtocol]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@redisExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@redisExamples]\n",
              "childs": [
                {
                  "content": ",[@redisExamples]",
                  "plain": "[@redisExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- None\n",
      "childs": {
        "0": [
          [
            {
              "content": "None",
              "plain": "None\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 18.400.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "18.400.000",
              "plain": "18.400.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  },
  {
    "tag": "Resque - https://resque.github.io/",
    "descr": "",
    "Description": {
      "plain": "Resque (pronounced like rescue) is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later.",
      "childs": {
        "0": [
          "Resque (pronounced like rescue) is a Redis-backed library for creating background jobs, placing those jobs on multiple queues, and processing them later."
        ]
      }
    },
    "Repo": {
      "plain": "- https://github.com/resque/resque\n",
      "childs": {
        "0": [
          [
            {
              "content": "https://github.com/resque/resque",
              "plain": "https://github.com/resque/resque\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "License": {
      "plain": "- MIT\n    - [@resqueLicense]\n",
      "childs": {
        "0": [
          [
            {
              "content": "MIT",
              "plain": "MIT\n",
              "plainChilds": "    - [@resqueLicense]\n",
              "childs": [
                {
                  "content": ",[@resqueLicense]",
                  "plain": "[@resqueLicense]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "Protocol": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Platforms": {
      "plain": "",
      "childs": {
        "0": [
          ""
        ]
      }
    },
    "Working example": {
      "plain": "- Yes\n    - [@resqueExamples]\n",
      "childs": {
        "0": [
          [
            {
              "content": "Yes",
              "plain": "Yes\n",
              "plainChilds": "    - [@resqueExamples]\n",
              "childs": [
                {
                  "content": ",[@resqueExamples]",
                  "plain": "[@resqueExamples]\n",
                  "plainChilds": "",
                  "childs": []
                }
              ]
            }
          ]
        ]
      }
    },
    "JMS support": {
      "plain": "- No\n",
      "childs": {
        "0": [
          [
            {
              "content": "No",
              "plain": "No\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Broker Backend": {
      "plain": "- Redis\n",
      "childs": {
        "0": [
          [
            {
              "content": "Redis",
              "plain": "Redis\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    },
    "Google hits": {
      "plain": "- 290.000\n",
      "childs": {
        "0": [
          [
            {
              "content": "290.000",
              "plain": "290.000\n",
              "plainChilds": "",
              "childs": []
            }
          ]
        ]
      }
    }
  }
]